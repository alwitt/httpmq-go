/*
httpmq

HTTP/2 based message broker built around NATS JetStream

API version: v0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// DataplaneMsgToDeliverSeq struct for DataplaneMsgToDeliverSeq
type DataplaneMsgToDeliverSeq struct {
	// Consumer is the message sequence number for this consumer
	Consumer *int64 `json:"consumer,omitempty"`
	// Stream is the message sequence number within the stream
	Stream *int64 `json:"stream,omitempty"`
}

// NewDataplaneMsgToDeliverSeq instantiates a new DataplaneMsgToDeliverSeq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataplaneMsgToDeliverSeq() *DataplaneMsgToDeliverSeq {
	this := DataplaneMsgToDeliverSeq{}
	return &this
}

// NewDataplaneMsgToDeliverSeqWithDefaults instantiates a new DataplaneMsgToDeliverSeq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataplaneMsgToDeliverSeqWithDefaults() *DataplaneMsgToDeliverSeq {
	this := DataplaneMsgToDeliverSeq{}
	return &this
}

// GetConsumer returns the Consumer field value if set, zero value otherwise.
func (o *DataplaneMsgToDeliverSeq) GetConsumer() int64 {
	if o == nil || o.Consumer == nil {
		var ret int64
		return ret
	}
	return *o.Consumer
}

// GetConsumerOk returns a tuple with the Consumer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataplaneMsgToDeliverSeq) GetConsumerOk() (*int64, bool) {
	if o == nil || o.Consumer == nil {
		return nil, false
	}
	return o.Consumer, true
}

// HasConsumer returns a boolean if a field has been set.
func (o *DataplaneMsgToDeliverSeq) HasConsumer() bool {
	if o != nil && o.Consumer != nil {
		return true
	}

	return false
}

// SetConsumer gets a reference to the given int64 and assigns it to the Consumer field.
func (o *DataplaneMsgToDeliverSeq) SetConsumer(v int64) {
	o.Consumer = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *DataplaneMsgToDeliverSeq) GetStream() int64 {
	if o == nil || o.Stream == nil {
		var ret int64
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataplaneMsgToDeliverSeq) GetStreamOk() (*int64, bool) {
	if o == nil || o.Stream == nil {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *DataplaneMsgToDeliverSeq) HasStream() bool {
	if o != nil && o.Stream != nil {
		return true
	}

	return false
}

// SetStream gets a reference to the given int64 and assigns it to the Stream field.
func (o *DataplaneMsgToDeliverSeq) SetStream(v int64) {
	o.Stream = &v
}

func (o DataplaneMsgToDeliverSeq) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Consumer != nil {
		toSerialize["consumer"] = o.Consumer
	}
	if o.Stream != nil {
		toSerialize["stream"] = o.Stream
	}
	return json.Marshal(toSerialize)
}

type NullableDataplaneMsgToDeliverSeq struct {
	value *DataplaneMsgToDeliverSeq
	isSet bool
}

func (v NullableDataplaneMsgToDeliverSeq) Get() *DataplaneMsgToDeliverSeq {
	return v.value
}

func (v *NullableDataplaneMsgToDeliverSeq) Set(val *DataplaneMsgToDeliverSeq) {
	v.value = val
	v.isSet = true
}

func (v NullableDataplaneMsgToDeliverSeq) IsSet() bool {
	return v.isSet
}

func (v *NullableDataplaneMsgToDeliverSeq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataplaneMsgToDeliverSeq(val *DataplaneMsgToDeliverSeq) *NullableDataplaneMsgToDeliverSeq {
	return &NullableDataplaneMsgToDeliverSeq{value: val, isSet: true}
}

func (v NullableDataplaneMsgToDeliverSeq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataplaneMsgToDeliverSeq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
