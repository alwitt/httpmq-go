/*
httpmq

HTTP/2 based message broker built around NATS JetStream

API version: v0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DataplaneApiService DataplaneApi service
type DataplaneApiService service

type ApiV1DataStreamStreamNameConsumerConsumerNameAckPostRequest struct {
	ctx          _context.Context
	ApiService   *DataplaneApiService
	streamName   string
	consumerName string
	sequenceNum  *DataplaneAckSeqNum
}

// Message message sequence numbers
func (r ApiV1DataStreamStreamNameConsumerConsumerNameAckPostRequest) SequenceNum(sequenceNum DataplaneAckSeqNum) ApiV1DataStreamStreamNameConsumerConsumerNameAckPostRequest {
	r.sequenceNum = &sequenceNum
	return r
}

func (r ApiV1DataStreamStreamNameConsumerConsumerNameAckPostRequest) Execute() (ApisStandardResponse, *_nethttp.Response, error) {
	return r.ApiService.V1DataStreamStreamNameConsumerConsumerNameAckPostExecute(r)
}

/*
V1DataStreamStreamNameConsumerConsumerNameAckPost Handle ACK for message

Process JetStream message ACK for a stream / consumer

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param streamName JetStream stream name
 @param consumerName JetStream consumer name
 @return ApiV1DataStreamStreamNameConsumerConsumerNameAckPostRequest
*/
func (a *DataplaneApiService) V1DataStreamStreamNameConsumerConsumerNameAckPost(ctx _context.Context, streamName string, consumerName string) ApiV1DataStreamStreamNameConsumerConsumerNameAckPostRequest {
	return ApiV1DataStreamStreamNameConsumerConsumerNameAckPostRequest{
		ApiService:   a,
		ctx:          ctx,
		streamName:   streamName,
		consumerName: consumerName,
	}
}

// Execute executes the request
//  @return ApisStandardResponse
func (a *DataplaneApiService) V1DataStreamStreamNameConsumerConsumerNameAckPostExecute(r ApiV1DataStreamStreamNameConsumerConsumerNameAckPostRequest) (ApisStandardResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod  = _nethttp.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue ApisStandardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataplaneApiService.V1DataStreamStreamNameConsumerConsumerNameAckPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/data/stream/{streamName}/consumer/{consumerName}/ack"
	localVarPath = strings.Replace(localVarPath, "{"+"streamName"+"}", _neturl.PathEscape(parameterToString(r.streamName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"consumerName"+"}", _neturl.PathEscape(parameterToString(r.consumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.sequenceNum == nil {
		return localVarReturnValue, nil, reportError("sequenceNum is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sequenceNum
	req, err := a.client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApisStandardResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApisStandardResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1DataStreamStreamNameConsumerConsumerNameGetRequest struct {
	ctx            _context.Context
	ApiService     *DataplaneApiService
	streamName     string
	consumerName   string
	subjectName    *string
	maxMsgInflight *int32
	deliveryGroup  *string
}

// JetStream subject to subscribe to
func (r ApiV1DataStreamStreamNameConsumerConsumerNameGetRequest) SubjectName(subjectName string) ApiV1DataStreamStreamNameConsumerConsumerNameGetRequest {
	r.subjectName = &subjectName
	return r
}

// Max number of inflight messages (DEFAULT: 1)
func (r ApiV1DataStreamStreamNameConsumerConsumerNameGetRequest) MaxMsgInflight(maxMsgInflight int32) ApiV1DataStreamStreamNameConsumerConsumerNameGetRequest {
	r.maxMsgInflight = &maxMsgInflight
	return r
}

// Needed if consumer uses delivery groups
func (r ApiV1DataStreamStreamNameConsumerConsumerNameGetRequest) DeliveryGroup(deliveryGroup string) ApiV1DataStreamStreamNameConsumerConsumerNameGetRequest {
	r.deliveryGroup = &deliveryGroup
	return r
}

func (r ApiV1DataStreamStreamNameConsumerConsumerNameGetRequest) Execute() (ApisAPIRestRespDataMessage, *_nethttp.Response, error) {
	return r.ApiService.V1DataStreamStreamNameConsumerConsumerNameGetExecute(r)
}

/*
V1DataStreamStreamNameConsumerConsumerNameGet Establish a pull subscribe session

Establish a JetStream pull subscribe session for a client. This is a long lived

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param streamName JetStream stream name
 @param consumerName JetStream consumer name
 @return ApiV1DataStreamStreamNameConsumerConsumerNameGetRequest
*/
func (a *DataplaneApiService) V1DataStreamStreamNameConsumerConsumerNameGet(ctx _context.Context, streamName string, consumerName string) ApiV1DataStreamStreamNameConsumerConsumerNameGetRequest {
	return ApiV1DataStreamStreamNameConsumerConsumerNameGetRequest{
		ApiService:   a,
		ctx:          ctx,
		streamName:   streamName,
		consumerName: consumerName,
	}
}

// Execute executes the request
//  @return ApisAPIRestRespDataMessage
func (a *DataplaneApiService) V1DataStreamStreamNameConsumerConsumerNameGetExecute(r ApiV1DataStreamStreamNameConsumerConsumerNameGetRequest) (ApisAPIRestRespDataMessage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod  = _nethttp.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue ApisAPIRestRespDataMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataplaneApiService.V1DataStreamStreamNameConsumerConsumerNameGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/data/stream/{streamName}/consumer/{consumerName}"
	localVarPath = strings.Replace(localVarPath, "{"+"streamName"+"}", _neturl.PathEscape(parameterToString(r.streamName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"consumerName"+"}", _neturl.PathEscape(parameterToString(r.consumerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.subjectName == nil {
		return localVarReturnValue, nil, reportError("subjectName is required and must be specified")
	}

	localVarQueryParams.Add("subject_name", parameterToString(*r.subjectName, ""))
	if r.maxMsgInflight != nil {
		localVarQueryParams.Add("max_msg_inflight", parameterToString(*r.maxMsgInflight, ""))
	}
	if r.deliveryGroup != nil {
		localVarQueryParams.Add("delivery_group", parameterToString(*r.deliveryGroup, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApisStandardResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApisStandardResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1DataSubjectSubjectNamePostRequest struct {
	ctx         _context.Context
	ApiService  *DataplaneApiService
	subjectName string
	message     *string
}

// Message to publish in Base64 encoding
func (r ApiV1DataSubjectSubjectNamePostRequest) Message(message string) ApiV1DataSubjectSubjectNamePostRequest {
	r.message = &message
	return r
}

func (r ApiV1DataSubjectSubjectNamePostRequest) Execute() (ApisStandardResponse, *_nethttp.Response, error) {
	return r.ApiService.V1DataSubjectSubjectNamePostExecute(r)
}

/*
V1DataSubjectSubjectNamePost Publish a message

Publish a Base64 encoded message to a JetStream subject

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subjectName JetStream subject to publish under
 @return ApiV1DataSubjectSubjectNamePostRequest
*/
func (a *DataplaneApiService) V1DataSubjectSubjectNamePost(ctx _context.Context, subjectName string) ApiV1DataSubjectSubjectNamePostRequest {
	return ApiV1DataSubjectSubjectNamePostRequest{
		ApiService:  a,
		ctx:         ctx,
		subjectName: subjectName,
	}
}

// Execute executes the request
//  @return ApisStandardResponse
func (a *DataplaneApiService) V1DataSubjectSubjectNamePostExecute(r ApiV1DataSubjectSubjectNamePostRequest) (ApisStandardResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod  = _nethttp.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue ApisStandardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataplaneApiService.V1DataSubjectSubjectNamePost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/data/subject/{subjectName}"
	localVarPath = strings.Replace(localVarPath, "{"+"subjectName"+"}", _neturl.PathEscape(parameterToString(r.subjectName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.message == nil {
		return localVarReturnValue, nil, reportError("message is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"text/plain"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.message
	req, err := a.client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApisStandardResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApisStandardResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
