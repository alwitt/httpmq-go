/*
httpmq

HTTP/2 based message broker built around NATS JetStream

API version: v0.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ApisStandardResponse struct for ApisStandardResponse
type ApisStandardResponse struct {
	Error *ApisErrorDetail `json:"error,omitempty"`
	// Success indicates whether the request was successful
	Success bool `json:"success"`
}

// NewApisStandardResponse instantiates a new ApisStandardResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApisStandardResponse(success bool) *ApisStandardResponse {
	this := ApisStandardResponse{}
	this.Success = success
	return &this
}

// NewApisStandardResponseWithDefaults instantiates a new ApisStandardResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApisStandardResponseWithDefaults() *ApisStandardResponse {
	this := ApisStandardResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ApisStandardResponse) GetError() ApisErrorDetail {
	if o == nil || o.Error == nil {
		var ret ApisErrorDetail
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApisStandardResponse) GetErrorOk() (*ApisErrorDetail, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ApisStandardResponse) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given ApisErrorDetail and assigns it to the Error field.
func (o *ApisStandardResponse) SetError(v ApisErrorDetail) {
	o.Error = &v
}

// GetSuccess returns the Success field value
func (o *ApisStandardResponse) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *ApisStandardResponse) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *ApisStandardResponse) SetSuccess(v bool) {
	o.Success = v
}

func (o ApisStandardResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if true {
		toSerialize["success"] = o.Success
	}
	return json.Marshal(toSerialize)
}

type NullableApisStandardResponse struct {
	value *ApisStandardResponse
	isSet bool
}

func (v NullableApisStandardResponse) Get() *ApisStandardResponse {
	return v.value
}

func (v *NullableApisStandardResponse) Set(val *ApisStandardResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableApisStandardResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableApisStandardResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApisStandardResponse(val *ApisStandardResponse) *NullableApisStandardResponse {
	return &NullableApisStandardResponse{value: val, isSet: true}
}

func (v NullableApisStandardResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApisStandardResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
